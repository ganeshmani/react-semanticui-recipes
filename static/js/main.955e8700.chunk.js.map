{"version":3,"sources":["components/MealCard/index.js","components/MealDetails/index.js","App.js","serviceWorker.js","index.js"],"names":["MealCard","imageUrl","title","onClick","Card","Image","src","wrapped","ui","Content","Header","MealDetails","mealId","onBackButtonClick","useQuery","key","a","console","log","fetch","then","res","json","result","meals","isLoading","error","data","Dimmer","active","inverted","Loader","content","Container","Button","secondary","strMeal","Grid","divided","Row","columns","Column","as","strCategory","strInstructions","href","strSource","strYoutube","App","useState","currentCategory","setCurrentCategory","selectedMealId","setSelectedMealId","searchTerm","setSearchTerm","isSearch","setSearch","categories","map","item","idCategory","text","value","image","strCategoryThumb","enabled","searchResults","className","textAlign","Input","size","onChange","e","target","placeholder","Dropdown","fluid","search","selection","options","Group","itemsPerRow","meal","idMeal","strMealThumb","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.955e8700.chunk.js","sourcesContent":["import React from \"react\";\nimport { Card, Image, Icon, Grid } from \"semantic-ui-react\";\nconst MealCard = ({ imageUrl, title, onClick }) => {\n  return (\n    <Card onClick={onClick}>\n      <Image src={imageUrl} wrapped ui={false} />\n      <Card.Content>\n        <Card.Header>{title}</Card.Header>\n        {/* <Card.Meta>\n          <span className=\"date\">{type}</span>\n        </Card.Meta> */}\n        {/* <Card.Description>\n          Matthew is a musician living in Nashville.\n        </Card.Description> */}\n      </Card.Content>\n    </Card>\n  );\n};\n\nexport default MealCard;\n","import React from \"react\";\nimport { useQuery } from \"react-query\";\nimport {\n  Container,\n  Input,\n  Button,\n  Dropdown,\n  Loader,\n  Dimmer,\n  Header,\n  Grid,\n} from \"semantic-ui-react\";\nconst MealDetails = ({ mealId, onBackButtonClick }) => {\n  const { isLoading, error, data: meals } = useQuery(\n    [\"categories\", mealId],\n    async (key, mealId) => {\n      console.log(\"mealId\", mealId);\n      let result = await fetch(\n        `https://www.themealdb.com/api/json/v1/1/lookup.php?i=${mealId}`\n      ).then((res) => res.json());\n      console.log(\"result\", result);\n      return result.meals;\n    }\n  );\n\n  if (isLoading)\n    return (\n      <Dimmer active inverted>\n        <Loader inverted content=\"Loading\" />\n      </Dimmer>\n    );\n\n  if (meals) {\n    console.log(\"meals\", meals);\n  }\n  return (\n    <Container>\n      <Button secondary onClick={onBackButtonClick}>\n        Back\n      </Button>\n      <h4>{meals[0].strMeal}</h4>\n\n      <Grid divided=\"vertically\">\n        <Grid.Row columns={2}>\n          <Grid.Column>\n            <Header as=\"h3\">Category:</Header>\n          </Grid.Column>\n          <Grid.Column>\n            <p>{meals[0].strCategory}</p>\n          </Grid.Column>\n        </Grid.Row>\n        <Grid.Row columns={2}>\n          <Grid.Column>\n            <Header as=\"h3\">Instruction:</Header>\n          </Grid.Column>\n          <Grid.Column>\n            <p>{meals[0].strInstructions}</p>\n          </Grid.Column>\n        </Grid.Row>\n        <Grid.Row columns={2}>\n          <Grid.Column>\n            <Header as=\"h3\">Source:</Header>\n          </Grid.Column>\n          <Grid.Column>\n            <a href={meals[0].strSource}>Source</a>\n          </Grid.Column>\n        </Grid.Row>\n\n        <Grid.Row columns={2}>\n          <Grid.Column>\n            <Header as=\"h3\">Video:</Header>\n          </Grid.Column>\n          <Grid.Column>\n            <a href={meals[0].strYoutube}>Video</a>\n          </Grid.Column>\n        </Grid.Row>\n      </Grid>\n    </Container>\n  );\n};\n\nexport default MealDetails;\n","import React, { useState, useEffect, Fragment } from \"react\";\nimport \"./App.css\";\nimport {\n  Container,\n  Input,\n  Button,\n  Dropdown,\n  Loader,\n  Dimmer,\n  Card,\n} from \"semantic-ui-react\";\n\nimport { useQuery } from \"react-query\";\n\nimport MealCard from \"./components/MealCard\";\nimport MealDetails from \"./components/MealDetails\";\n\nfunction App() {\n  const [currentCategory, setCurrentCategory] = useState(0);\n  const [selectedMealId, setSelectedMealId] = useState(null);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [isSearch, setSearch] = useState(false);\n\n  const { isLoading, error, data: categories } = useQuery(\n    \"categories\",\n    async () => {\n      let result = await fetch(\n        \"https://www.themealdb.com/api/json/v1/1/categories.php\"\n      ).then((res) => res.json());\n      result = result.categories.map((item) => {\n        return {\n          key: item.idCategory,\n          text: item.strCategory,\n          value: item.idCategory,\n          image: item.strCategoryThumb,\n        };\n      });\n      return result;\n    }\n  );\n\n  const { data: meals } = useQuery(\n    [\"meals\", currentCategory, categories],\n    async (key, currentCategory, data) => {\n      let result = await fetch(\n        `https://www.themealdb.com/api/json/v1/1/filter.php?c=${data[currentCategory].text}`\n      ).then((res) => res.json());\n\n      return result.meals;\n    },\n    {\n      enabled: categories,\n    }\n  );\n\n  const { data: searchResults } = useQuery(\n    [\"searchMeals\", isSearch, searchTerm],\n    async (key, isSearch, searchTerm) => {\n      if (isSearch) {\n        let result = await fetch(\n          `https://www.themealdb.com/api/json/v1/1/search.php?s=${searchTerm}`\n        ).then((res) => res.json());\n        console.log(\"result\", result);\n        return result.meals;\n      } else {\n        return [];\n      }\n    }\n  );\n\n  const onSearch = () => {\n    setSearch(true);\n  };\n\n  const onSearchChange = (e) => {\n    setSearchTerm(e.target.value);\n  };\n\n  if (isLoading)\n    return (\n      <Dimmer active inverted>\n        <Loader inverted content=\"Loading\" />\n      </Dimmer>\n    );\n  return (\n    <Container className=\"container\" textAlign=\"center\">\n      {selectedMealId ? (\n        <MealDetails\n          mealId={selectedMealId}\n          onBackButtonClick={() => setSelectedMealId(null)}\n        />\n      ) : (\n        <Fragment>\n          <div className=\"row\">\n            <Input\n              className=\"search-input\"\n              size=\"large\"\n              value={searchTerm}\n              onChange={onSearchChange}\n              placeholder=\"Search Meal\"\n            />\n            <Button onClick={onSearch} secondary>\n              Search\n            </Button>\n            <Dropdown\n              className=\"drop-down\"\n              placeholder=\"Filter Category\"\n              fluid\n              search\n              selection\n              value={categories[currentCategory].value}\n              onChange={(e, { value }) => {\n                setCurrentCategory(value[0] - 1);\n              }}\n              options={categories}\n            />\n          </div>\n\n          <Container className=\"container\" textAlign=\"center\">\n            <Card.Group itemsPerRow={4}>\n              {searchTerm && isSearch ? (\n                searchResults &&\n                searchResults.map((meal) => {\n                  return (\n                    <MealCard\n                      title={meal.strMeal}\n                      onClick={() => {\n                        console.log(\"meal.idMeal\", meal.idMeal);\n                        setSelectedMealId(meal.idMeal);\n                      }}\n                      imageUrl={meal.strMealThumb}\n                    />\n                  );\n                })\n              ) : (\n                <Fragment>\n                  {meals &&\n                    meals.map((meal) => {\n                      return (\n                        <MealCard\n                          title={meal.strMeal}\n                          onClick={() => {\n                            console.log(\"meal.idMeal\", meal.idMeal);\n                            setSelectedMealId(meal.idMeal);\n                          }}\n                          imageUrl={meal.strMealThumb}\n                        />\n                      );\n                    })}\n                </Fragment>\n              )}\n            </Card.Group>\n          </Container>\n        </Fragment>\n      )}\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"semantic-ui-css/semantic.min.css\";\n// wireframe -> https://s3.amazonaws.com/assets.mockflow.com/app/wireframepro/company/C7d5648fe75e6ea905489e90fdc43d5e5/projects/M895313c521558953c1d57a8aaad9796b1599748501248/pages/afad87873baf4e3f861a6803c5be3acd/image/afad87873baf4e3f861a6803c5be3acd.png\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}